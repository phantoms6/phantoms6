#!/bin/bash


# Original: https://github.com/kris-anderson/remove-zoom-macos
# Modified 



###############
### helpers ###
###############

function not_found() {
	echo -e "not found" #$1
}

function deleted() {
	echo -e "deleted" #$1
}

function terminated() {
	echo -e "terminated" #$1
}

loggedInUser=$(stat -f "%Su" /dev/console)

###################
### remove zoom ###
###################

# kill the Zoom process if it's running

echo ""
echo -e "Checking to see if the Zoom process is running..."

if pgrep -i zoom >/dev/null; then

	kill "$(pgrep -i zoom)"
	printf "Zoom process "
	terminated

else

	printf "Zoom process "
	not_found

fi

# remove the Zoom application

echo ""
echo -e "Removing the Zoom Application..."

declare -a ZOOM_APPLICATION=(
	"/Applications/zoom.us.app"
	"/Users/$loggedInUser/Applications/zoom.us.app"
)

for ENTRY in "${ZOOM_APPLICATION[@]}"; do
	if [ -f "${ENTRY}" ] || [ -d "${ENTRY}" ]; then
		rm -rf "${ENTRY}"
		printf "%s " "${ENTRY}"
		deleted
	else
		printf "%s " "${ENTRY}"
		not_found
	fi
done

# unload the Zoom Audio Device and remove the kext file

echo ""
echo -e "Removing the Zoom Audio Device..."

if [ -f "/System/Library/Extensions/ZoomAudioDevice.kext" ] || [ -d "/System/Library/Extensions/ZoomAudioDevice.kext" ]; then

	kextunload -b zoom.us.ZoomAudioDevice
	rm -rf "/System/Library/Extensions/ZoomAudioDevice.kext"
	printf "/System/Library/Extensions/ZoomAudioDevice.kext file "
	deleted

else

	printf "/System/Library/Extensions/ZoomAudioDevice.kext file "
	not_found

fi

# remove the Zoom Plugin

echo ""
echo -e "Removing Zoom Plugins..."

declare -a ZOOM_PLUGIN=(
	"/Library/Internet Plug-Ins/ZoomUsPlugIn.plugin"
	"/Users/$loggedInUser/Library/Internet Plug-Ins/ZoomUsPlugIn.plugin"
)

for ENTRY in "${ZOOM_PLUGIN[@]}"; do
	if [ -f "${ENTRY}" ] || [ -d "${ENTRY}" ]; then
		rm -rf "${ENTRY}"
		printf "%s " "${ENTRY}"
		deleted
	else
		printf "%s " "${ENTRY}"
		not_found
	fi
done

# remove Zoom defaults

echo ""
echo -e "Removing Zoom defaults preferences..."

if ! defaults read us.zoom.xos 2>&1 | grep -Eq "Domain us.zoom.xos does not exist"; then

	defaults delete us.zoom.xos
	printf "sudo defaults read us.zoom.xos "
	deleted

else

	printf "sudo defaults read us.zoom.xos "
	not_found

fi

echo ""
echo -e "Removing pkgutil history..."

if pkgutil --pkgs | grep -Eq "us.zoom.pkg.videmeeting"; then

	pkgutil --forget us.zoom.pkg.videmeeting &> /dev/null
	printf "pkgutil history for us.zoom.pkg.videmeeting "
	deleted

else

	printf "pkgutil history for us.zoom.pkg.videmeeting "
	not_found

fi

# remove extra Zoom items

echo ""
echo -e "Removing extra items that Zoom leaves behind..."

declare -a ZOOM_ITEMS=(
	"/Users/$loggedInUser/.zoomus"
	"/Users/$loggedInUser/Library/Application Support/zoom.us"
	"/Library/Caches/us.zoom.xos"
	"/Users/$loggedInUser/Library/Caches/us.zoom.xos"
	"/Library/Logs/zoom.us"
	"/Users/$loggedInUser/Library/Logs/zoom.us"
	"/Library/Logs/zoominstall.log"
	"/Users/$loggedInUser/Library/Logs/zoominstall.log"
	"/Library/Preferences/ZoomChat.plist"
	"/Users/$loggedInUser/Library/Preferences/ZoomChat.plist"
	"/Library/Preferences/us.zoom.xos.plist"
	"/Users/$loggedInUser/Library/Preferences/us.zoom.xos.plist"
	"/Users/$loggedInUser/Library/Saved Application State/us.zoom.xos.savedState"
	"/Users/$loggedInUser/Library/Cookies/us.zoom.xos.binarycookies"
)

for ENTRY in "${ZOOM_ITEMS[@]}"; do
	if [ -f "${ENTRY}" ] || [ -d "${ENTRY}" ]; then
		rm -rf "${ENTRY}"
		printf "%s " "${ENTRY}"
		deleted
	else
		printf "%s " "${ENTRY}"
		not_found
	fi
done
